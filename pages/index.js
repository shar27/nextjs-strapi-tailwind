import Head from 'next/head'
import Image from 'next/image'
import {loadStripe} from '@stripe/stripe-js'
import Nav from '../components/Nav'
import News from '../components/News'
import { useState, useEffect } from 'react'


export default function Home({data}) {
  const [date, setDate] = useState('') 
const [publishableKey, setPublishableKey] = useState('')

useEffect(() => {
  fetch('api/keys',{
  method: 'GET',
  headers: {'Content-Type': 'application/json'},
}).then((res) => res.json())
.then((data) => {
  setPublishableKey(data.publishableKey)
})

}, [])




 

  const showDate = () => {
    setDate(Date)
    //console.log(date);
  }

 useEffect(() => {
 showDate()
 }, [1000])
 

  const {Heading, subheading} = data.data.homepages.data[0].attributes;
  
const stripe  = loadStripe(publishableKey);

 
  return (
    <div>
      <Head>
        <title>DailyNews</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    
    <div>

      <h1 className="text-4xl text-red-500 text-center flex justify-start">Welcome to DailyNews.com</h1>
     
      <h1 className='font-bold flex justify-end text-red-500'>{date}</h1>
      </div>
      <Nav/>
      <div className='bg-cover w-96 h-96 relative z-0 opacity-75 flex justify-center mt-20'>
        <Image src={'http://localhost:1337/uploads/thumbnail_roman_kraft_Zua2hyv_T_Bk_unsplash_17e94609e6.jpg'} 
       className="rounded-lg"
     layout='fill'
        />
      </div>
      <div className='absolute z-50 top-96 left-72'>
      <h1 className='text-6xl font-bold'>{Heading}</h1> 
      <h2 className='text-3xl font-bold'>{subheading}</h2>
      </div>
    
    </div>
  )
}

export const getStaticProps = async (ctx) => {

  const fetchHero = {
      method: "post",
      headers: {
          "content-type": "application/json"
      },
      body: JSON.stringify({
          query: `{
           
              homepages {
                data {
                  attributes {
                    Heading
                    subheading
                    hero{
                      data{
                        attributes{
                          formats
                        }
                      }
                    }
                  
                }
              }
            }
          }
          `
      })
  }
  
  
  const res = await fetch('http://localhost:1337/graphql', fetchHero)
  const data = await res.json()
  
  if(!data){
      return{
          redirect: {
              destination: '/',
              permanent: false,
          },
      }
  }
      return {
          props:{
              data,
              revalidate: 10
          }
      }
  }